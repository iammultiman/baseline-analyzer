#!/bin/bash

# Baseline Analyzer - Database Setup Script
# This script sets up Cloud SQL PostgreSQL instance with pgvector extension

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID:-""}
REGION=${GOOGLE_CLOUD_REGION:-"us-central1"}
INSTANCE_NAME="baseline-analyzer-db"
DATABASE_NAME="baseline_analyzer"
DB_USER="baseline_user"
DB_PASSWORD=""

echo -e "${BLUE}🗄️  Baseline Analyzer - Database Setup${NC}"
echo "=================================="

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo -e "${RED}❌ gcloud CLI is not installed. Please install it first.${NC}"
    exit 1
fi

# Check if project ID is set
if [ -z "$PROJECT_ID" ]; then
    echo -e "${YELLOW}⚠️  GOOGLE_CLOUD_PROJECT_ID not set. Please enter your project ID:${NC}"
    read -p "Project ID: " PROJECT_ID
fi

# Generate random password if not set
if [ -z "$DB_PASSWORD" ]; then
    DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    echo -e "${GREEN}🔐 Generated database password${NC}"
fi

echo -e "${BLUE}📋 Configuration:${NC}"
echo "  Project ID: $PROJECT_ID"
echo "  Region: $REGION"
echo "  Instance: $INSTANCE_NAME"
echo "  Database: $DATABASE_NAME"
echo "  User: $DB_USER"
echo ""

# Set the project
echo -e "${BLUE}🔧 Setting up Google Cloud project...${NC}"
gcloud config set project $PROJECT_ID

# Enable required APIs
echo -e "${BLUE}🔌 Enabling required APIs...${NC}"
gcloud services enable sqladmin.googleapis.com
gcloud services enable compute.googleapis.com

# Check if instance already exists
if gcloud sql instances describe $INSTANCE_NAME --project=$PROJECT_ID &> /dev/null; then
    echo -e "${YELLOW}⚠️  Cloud SQL instance '$INSTANCE_NAME' already exists.${NC}"
    read -p "Do you want to continue with existing instance? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}❌ Aborted by user.${NC}"
        exit 1
    fi
else
    # Create Cloud SQL instance
    echo -e "${BLUE}🏗️  Creating Cloud SQL PostgreSQL instance...${NC}"
    gcloud sql instances create $INSTANCE_NAME \
        --database-version=POSTGRES_15 \
        --tier=db-f1-micro \
        --region=$REGION \
        --storage-type=SSD \
        --storage-size=10GB \
        --storage-auto-increase \
        --backup-start-time=03:00 \
        --maintenance-window-day=SUN \
        --maintenance-window-hour=04 \
        --maintenance-release-channel=production \
        --deletion-protection

    echo -e "${GREEN}✅ Cloud SQL instance created successfully!${NC}"
fi

# Create database
echo -e "${BLUE}🗃️  Creating database...${NC}"
gcloud sql databases create $DATABASE_NAME --instance=$INSTANCE_NAME || echo -e "${YELLOW}⚠️  Database may already exist${NC}"

# Create database user
echo -e "${BLUE}👤 Creating database user...${NC}"
gcloud sql users create $DB_USER \
    --instance=$INSTANCE_NAME \
    --password=$DB_PASSWORD || echo -e "${YELLOW}⚠️  User may already exist${NC}"

# Get the instance connection name
CONNECTION_NAME=$(gcloud sql instances describe $INSTANCE_NAME --format="value(connectionName)")

# Install pgvector extension (requires connecting to the database)
echo -e "${BLUE}🧩 Setting up pgvector extension...${NC}"
echo "Note: You may need to manually install pgvector extension after connecting to the database."
echo "Run the following SQL commands after connecting:"
echo "  CREATE EXTENSION IF NOT EXISTS vector;"
echo "  CREATE EXTENSION IF NOT EXISTS pgcrypto;"

# Generate connection string
DATABASE_URL="postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DATABASE_NAME?host=/cloudsql/$CONNECTION_NAME"

echo ""
echo -e "${GREEN}🎉 Database setup completed!${NC}"
echo ""
echo -e "${BLUE}📝 Connection Details:${NC}"
echo "  Instance Connection Name: $CONNECTION_NAME"
echo "  Database URL (for Cloud SQL Proxy): $DATABASE_URL"
echo "  Database Name: $DATABASE_NAME"
echo "  Username: $DB_USER"
echo "  Password: $DB_PASSWORD"
echo ""
echo -e "${BLUE}🔗 Next Steps:${NC}"
echo "1. Update your .env.local file with the DATABASE_URL"
echo "2. Install Cloud SQL Proxy: https://cloud.google.com/sql/docs/postgres/sql-proxy"
echo "3. Connect using: cloud_sql_proxy -instances=$CONNECTION_NAME=tcp:5432"
echo "4. Run database migrations: npm run db:migrate:deploy"
echo "5. Seed the database: npm run db:seed"
echo ""
echo -e "${YELLOW}⚠️  Important: Save the database password securely!${NC}"
echo "Password: $DB_PASSWORD"

# Save configuration to file
cat > .env.database << EOF
# Database Configuration - Generated by setup-database.sh
GOOGLE_CLOUD_PROJECT_ID=$PROJECT_ID
CLOUD_SQL_CONNECTION_NAME=$CONNECTION_NAME
DATABASE_NAME=$DATABASE_NAME
DATABASE_USER=$DB_USER
DATABASE_PASSWORD=$DB_PASSWORD
DATABASE_URL=$DATABASE_URL
EOF

echo ""
echo -e "${GREEN}💾 Configuration saved to .env.database${NC}"
echo -e "${YELLOW}⚠️  Add DATABASE_URL to your .env.local file${NC}"